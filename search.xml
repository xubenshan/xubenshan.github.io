<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>801通信原理复习感悟</title>
      <link href="/2023/07/15/801%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0%E6%84%9F%E6%82%9F/"/>
      <url>/2023/07/15/801%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="801通信原理复习"><a href="#801通信原理复习" class="headerlink" title="801通信原理复习"></a>801通信原理复习</h1><blockquote><p>复盘下我的复习进度和成果，存在的问题。并作相应的调整。</p></blockquote><h2 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h2><p>  本来是从三月份就开始学习通信原理的，但是没有坚持下来，直到七月份才完成基础知识的复习。在复习基础知识的这段时间，开始是一个小时，后来就延长到了两个小时学习时间。一般都是在下午复习专业课。复习完一遍基础知识，我对通原的框架有了个比较清晰的认知。但是对具体的细节把握并不好。但是问题不大，专业课就是要快速多遍复习，在做题中去理解知识点。这一点在后面的做题中能很好的感悟到。</p><p>  七月初完成一轮知识点后，就进入了第二轮复习，也就是做题阶段。这个过程细节是这样的，每天做前一天看视频讲解的题目，大约8到9个左右。然后再看10个左右的题目讲解。每天专业课的时间在2小时左右。按照这个进度大约可以在8月中旬完成第二轮复习。</p><h2 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h2><p>  通过做题发现，通原的难度并不是很大，我觉得好好学是完全没问题拿140+的。只要对它有信心，敢想敢做就可以。存在的一个问题就是有时候做题想不到怎么做，然后就直接去看答案，没有一个独立思考的过程。这点我觉得完全无可厚非。因为这些习题我们要做很多遍，现在的目的就是快速结束第二轮，进行第三轮强化。每天两个小时时间也是完全没问题的，可以完成每天的计划，也给了自己一个紧迫感。</p><h2 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h2><p>  暑假最好能看完第三轮强化的拓展篇视频，然后在九月份完成第三轮强化，为九月份末的模考做准备。完成第三轮强化后，就可以对做过的强化篇和拓展篇。十月份可以进行小题强化和理论篇的复习。十一月和十二月等到时候再说。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><blockquote><p>以下是我的时间安排</p></blockquote><ul><li>7.08-7.11 结束第三章强化篇习题</li><li>7.11-7.16 结束第四章强化篇习题</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 考研感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的学习笔记</title>
      <link href="/2023/07/15/git/"/>
      <url>/2023/07/15/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a><strong>Git学习笔记</strong></h1><blockquote><p>我学习Git的原因就是为了很方便的将本地代码上传到远程仓库，比如<code>gitee</code>，<code>GitHub</code>。</p></blockquote><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a><strong>版本控制</strong></h2><blockquote><p>学习Git前一定要了解什么是版本控制。</p></blockquote><p>所谓的版本控制其实就是一种管理文件，工程历史记录的一种技术。这种技术可以很方便的查看更改历史记录，恢复到以前的版本。版本控制常用于管理多人协同开发项目中。</p><p>常见的版本控制工具：</p><ul><li>Git</li><li>SVN</li><li>CVS</li><li>VSS</li><li>TFS</li><li>Visual studio Online</li></ul><p>版本控制的分类</p><ul><li>本地版本控制</li></ul><p>记录文件每次的更新，对每个版本做一个快照。</p><ul><li>集中版本控制</li></ul><p>所有的版本数据都存储在一个中央服务器上，用户从服务器上同步更新或上传自己的修改。</p><p>所有的数据都在一个服务器上，用户本地只有自己以前同步的版本，只有联网才能看到之前的版本。另外如果这个服务器损坏，就会丢失所有的数据，需要定期备份。SVN是集中版本控制的典型。</p><ul><li>分布式版本控制</li></ul><p>每个用户的电脑都是一个服务器，所有的版本信息都同步到本地的每个用户，这样就可以在本地查看所有的版本历史，离线在本地提交，只需联网的时候push到相应的服务器或其他用户那里。每个用户保存的都是所有的版本数据，因此不用担心出现因为服务器损坏，或者网络问题，而不能工作的情况。Git是分布式版本控制的典型。</p><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a><strong>Git简介</strong></h2><blockquote><p>Git就是一个分布式版本控制工具。</p></blockquote><p>Git是由Linux之父Linus开发的。是目前世界上最先进的分布式版本控制系统。</p><p>Git是开源的，免费的，最初的Git是为辅助Linux内核开发的，来代替Bitkeeper来管理和维护代码。</p><h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a><strong>Git的安装</strong></h2><h3 id="Windows下Git的安装"><a href="#Windows下Git的安装" class="headerlink" title="Windows下Git的安装"></a>Windows下Git的安装</h3><p><a href="https://git-scm.com/downloads">Git下载官网</a></p><p>在Git官网下载可能会非常慢，还会出现打不开网页的现象。小伙伴们可以去淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a>  ，下载对应版本即可。</p><p>安装的过程中只要无脑下一步即可。</p><p>安装完成之后，在开始菜单中会有Git项。如下图：</p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731165152676.png" alt="image-20220731165152676" style="zoom: 80%;" /><p>简单说一下，<code>Git Bash</code>是类似<code>linux</code>的命令行；<code>Git CMD</code>是类似<code>window cmd</code>的命令行；<code>Git GUI</code>是图形化界面。</p><p>在日常使用中，我们一般只用<code>Git Bash</code>。</p><p>我自己下载的是<code>2.36.1</code>版本。通过<code>win+R</code>，打开运行，输入<code>cmd</code>。然后输入<code>git --version</code>，就可以查看对应的版本信息了。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731165743893.png" alt="image-20220731165743893"></p><h2 id="Git的环境配置"><a href="#Git的环境配置" class="headerlink" title="Git的环境配置"></a><strong>Git的环境配置</strong></h2><pre><code class="bash">git config --system --list# 查看系统配置git config --global --list# 查看本地配置</code></pre><p>使用Git前我们需要设置用户名和密码。</p><ul><li><p><code>git config --global user.name &quot;用户名&quot;</code></p></li><li><p><code>git config --global user.email &quot;邮箱&quot;</code></p></li></ul><p>设置完成后输入<code>git config --global --list</code>，就可以查看用户名和邮箱是否设置成功。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731182535086.png" alt="image-20220731182535086"></p><p>另外Git在安装过程中会自动的将环境添加到系统变量的path路径下。不用额外进行添加。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731182135209.png" alt="image-20220731182135209"></p><h2 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a><strong>Git基本理论</strong></h2><h2 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a><strong>Git项目搭建</strong></h2><p>在工作盘新建一个名为<code>test</code>文件夹，进入文件夹内部，右键打开<code>git bash</code>。</p><p>输入<code>git init</code>，将这个文件夹初始化成<code>git</code>管理的文件夹。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731182959388.png" alt="image-20220731182959388"></p><p>我们会看到文件夹内部多了一个<code>.git</code>文件夹。</p><p>输入<code>touch test.txt</code>，在工作目录下创建了一个test文本。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731195654748.png" alt="image-20220731195654748"></p><p><code>git add test.txt</code>，将test文件添加到index暂存区；</p><p><code>git commit -m &quot;add test.txt&quot;</code> 将test文件提交到本地仓库；</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731205156110.png" alt="image-20220731205156110"></p><p>至此，我们已经将创建的文件存储在本地仓库了，我们可以通过pull命令将本地仓库同步到远程仓库中。下面看具体的做法。</p><h3 id="使用Github"><a href="#使用Github" class="headerlink" title="使用Github"></a>使用Github</h3><p>首先你要有一个Github账户。没有注册的小伙伴们可以先去注册一下。</p><p>由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，因此我们要进行一些必要的配置。</p><p>创建SSH key。看一下用户目录下是否有.ssh文件夹，里面是否有<code>id_rsa</code>和 <code>id_rsa.pub</code>。没有的话就要执行下面的命令（之前没用过github或gitee的话一般是没有的）</p><pre><code class="bash"># 进入用户目录下的.ssh目录 C:\Users\86186\\.ssh# 生成ssh公钥 右键git bashssh-keygen -t tsa -C &quot;youremail@example.com&quot; //邮箱地址换成自己的</code></pre><p>然后一路回车，使用默认值即可。执行完成后，.ssh文件夹下面就出现<code>id_rsa</code>和 <code>id_rsa.pub</code>文件，第一个是私钥，不能告诉别人；第二个是公钥。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220801215656790.png" alt="image-20220801215656790"></p><p>打开公钥文件，将里面的内容复制下来。</p><p>登录github，点击设置，找到”SSH and GPG keys” ，点击”New SSH key”。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220801220445338.png" alt="image-20220801220445338"></p><p>将公钥内容复制到Key文本框中，title随便起个名字，点击<code>Add SSH key</code>。ssh key添加成功！</p><p>输入 <code>ssh -T git@github.com </code>   若出现<code>You&#39;ve successfully authenticated,but GithHub does not provide shell access</code>则证明已经连接上GitHub了。</p><p>接下来就该创建一个远程仓库了！</p><p>点击右上角的加号，新建仓库 <code>New repository</code> 。</p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731200551687.png" alt="image-20220731200551687" style="zoom:67%;" /><p>然后输入仓库名称，仓库描述，是否公开，最后创建仓库。</p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731204108694.png" alt="image-20220731204108694" style="zoom:67%;" /><p>github仓库就创建完成了，接下来我们要让远程仓库和本地仓库关联起来。</p><p>在test文件夹下运行命令 <code>git remote add origin git@github.com:xubenshan/test.git</code>。注意要将<code>xubenshan/test</code>换成你自己的用户名。否则你关联的就是我的远程库，你是无法将本地库推送上去的。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731204824909.png" alt="image-20220731204824909"></p><p>出现<code>unsafe repository</code>这种情况的话，运行git给你的解决方案即可。<code>git config --global --add safe.directory F:/test</code>。</p><p>再次运行 <code>git remote add origin git@github.com:xubenshan/test.git</code>。这样就将本地库同远程库关联起来了。</p><p>在GitHub官方文档里面，关联完成后，还要将当前分支<code>master</code>改成<code>main</code>。<code>master</code>可能跟黑人有关。对于我们来说改不改其实问题不大。我们就不改了，这样命令会少一些。</p><p>执行命令<code>git push -u origin master</code>。这样就可以将本地仓库上传到远程库里面了。其中<code>origin</code>是远程库的名字，<code>master</code>是本地仓库的当前分支。</p><p>需要注意的是第一次执行这个命令的时候需要加<code>-u</code>。Git会把本地的<code>master</code>分支内容推送到远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。直接执行<code>git push origin master</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/Snipaste_2022-07-31_21-31-53.jpg" alt="Snipaste_2022-07-31_21-31-53"></p><p>刷新<code>github</code>界面就能看到我们上传的test文件了·。</p><p>另外我们可以将GitHub里面的项目克隆到本地来。在GitHub上面新建一个仓库，这次我们勾选上<code>Add a README file</code>。仓库会自动创建一个<code>README.md</code>文件。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220801070555082.png" alt="image-20220801070555082"></p><p>在本地e盘执行<code>git clone git@github.com:xubenshan/test.git</code>，注意这里的仓库名仍然要换成你自己的。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220801071312130.png" alt="image-20220801071312130"></p><p>github上面的项目就克隆到了本地，我们会发现e盘多了个test文件夹。</p><pre><code class="bash"># 进入test文件夹cd test# 查看test文件夹下的内容ls# test文件夹下出现了一个README.md文件。# 我们就会发现远程库成功克隆到了本地！</code></pre><p>之后我们就可以将本地的文件通过<code>git add</code> <code>git commit</code>  <code>git push</code>命令上传到远程仓库。注意push的时候不是<code>master</code>而是<code>main</code>。这是因为clone的时候自动将本地的分支命名为<code>main</code>。</p><blockquote><p>Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。只不过<code>https</code>速度比较慢。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220801072319285.png" alt="image-20220801072319285"></p><blockquote><p>其他常用的git命令</p></blockquote><pre><code class="bash"># 查看远程库信息git remote -v# 删除远程库 （只是解除本地库与远程库的关系，不是物理上的删除远程库。要想真的删除远程库，必须在github上面操作）git remote rm &lt;name&gt;</code></pre><h3 id="使用gitee"><a href="#使用gitee" class="headerlink" title="使用gitee"></a>使用gitee</h3><p>先注册登录码云，完善个人的信息。</p><p>设置本机绑定ssh公钥，实现免密码登录。</p><pre><code class="bash"># 进入用户目录下的.ssh目录 C:\Users\86186\\.ssh# 生成ssh公钥ssh-keygen -t tsassh</code></pre><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/Snipaste_2022-07-31_21-50-51.jpg" alt="Snipaste_2022-07-31_21-50-51"></p><p>生成完之后打开<code>id_rsa.pub</code>文件，将公钥粘贴到gitee里面。</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220731215659358.png" alt="image-20220731215659358"></p><p>添加成功！</p><p>创建仓库，和GitHub类似，这里就不再重复了。</p><p>然后我们在本地库使用命令<code>git remote add</code>把它和远程库关联起来。</p><p><code>git remote add origin git@gitee.com:xu-benshan/test.git</code>。</p><p>之后的操作就和GitHub如出一辙了。<code>git push -u origin master</code>。</p><h3 id="Git问题汇总"><a href="#Git问题汇总" class="headerlink" title="Git问题汇总"></a>Git问题汇总</h3><p>在push的过程中，出现<code>error: failed to push some refs to &#39;gitee.com:xu-benshan/test.git</code>。解决方案参考<a href="https://blog.csdn.net/m0_43599959/article/details/108934056?ops_request_misc=&request_id=&biz_id=102&utm_term=failed%20to%20push%20some%20refs%20to%20%27g&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-108934056.142%5Ev35%5Epc_rank_34&spm=1018.2226.3001.4187">博客</a></p><p><code>error: failed to push some refs to &#39;github.com:xubenshan/test.git</code></p><p>另一种原因：执行了<code>git branch -M main</code>，将<code>master</code>分支重命名为<code>main</code>。pull的时候要将<code>master</code>改成<code>main</code>。</p><p><code>git push -u origin main</code></p><p>在<code>push</code>的过程中出现下面情况：</p><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220817070550908.png" alt="image-20220817070550908"></p><p>说明远程库和你的本地库版本不一样，这时候要先将远程库<code>pull</code>到本地库，然后再<code>push</code>到远程库。</p><pre><code class="bash">git pull --rebase origin mastergit push origin master</code></pre><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20220817071019403.png" alt="image-20220817071019403" style="zoom:80%;" /><h2 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a><strong>Git操作</strong></h2><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><h3 id="搭建git服务器"><a href="#搭建git服务器" class="headerlink" title="搭建git服务器"></a>搭建git服务器</h3><h2 id="使用vscode操作Git"><a href="#使用vscode操作Git" class="headerlink" title="使用vscode操作Git"></a><strong>使用vscode操作Git</strong></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>801通信原理总结</title>
      <link href="/2023/07/15/801%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/"/>
      <url>/2023/07/15/801%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="801通信原理总结"><a href="#801通信原理总结" class="headerlink" title="801通信原理总结"></a>801通信原理总结</h1><h2 id="第四章-模拟通信系统"><a href="#第四章-模拟通信系统" class="headerlink" title="第四章 模拟通信系统"></a>第四章 模拟通信系统</h2><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A1%86%E6%9E%B6.jpg" style="zoom: 67%;" /><p>第四章的知识体系非常清晰，内容也不是很多。主要包括两个方面，线性调制和非线性调制。重点内容就是调制和解调框图，不同调制方式的区别和表达式。</p><h3 id="题型一-已知调制方式求功率谱密度"><a href="#题型一-已知调制方式求功率谱密度" class="headerlink" title="题型一 已知调制方式求功率谱密度"></a>题型一 已知调制方式求功率谱密度</h3><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20230716145702054.png" alt="image-20230716145702054"></p><blockquote><p>本质上还是考察第三章随机过程的各种参数的求解</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20230716145907657.png" alt="image-20230716145907657"></p><h3 id="题型二-分析AM信号，求调制指数，功率，画频谱"><a href="#题型二-分析AM信号，求调制指数，功率，画频谱" class="headerlink" title="题型二 分析AM信号，求调制指数，功率，画频谱"></a>题型二 分析AM信号，求调制指数，功率，画频谱</h3><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20230716150014631.png" alt="image-20230716150014631"> </p><blockquote><p>第一问和第二问都是第二章的知识点。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20230716150202948.png" alt="image-20230716150202948"></p><h3 id="题型三-画出解调框图（多个信号）"><a href="#题型三-画出解调框图（多个信号）" class="headerlink" title="题型三 画出解调框图（多个信号）"></a>题型三 画出解调框图（多个信号）</h3><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20230716150301578.png" alt="image-20230716150301578"></p><blockquote><p>本质上还是考察前面几种调制方式的解调原理。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xubenshan/pic-blog@main/img/image-20230716150423447.png" alt="image-20230716150423447"></p><p>这里没有离散大载波，故直接写恢复载波即可。若有大载波，则要通过<code>NBF</code>或<code>窄带滤波器</code>进行提取载波。</p><p>·</p>]]></content>
      
      
      
        <tags>
            
            <tag> 考研感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复习考研政治的感悟</title>
      <link href="/2023/07/15/post%E5%A4%8D%E4%B9%A0%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E7%9A%84%E6%84%9F%E6%82%9F/"/>
      <url>/2023/07/15/post%E5%A4%8D%E4%B9%A0%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E7%9A%84%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 考研感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大唐杯经验分享</title>
      <link href="/2023/07/15/%E5%A4%A7%E5%94%90%E6%9D%AF%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
      <url>/2023/07/15/%E5%A4%A7%E5%94%90%E6%9D%AF%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="大唐杯备考建议分享"><a href="#大唐杯备考建议分享" class="headerlink" title="大唐杯备考建议分享"></a>大唐杯备考建议分享</h1><blockquote><p>有很多同学私信或者在群里问我该怎么去准备大唐杯，我总结了学习经验分享给大家。</p></blockquote><h2 id="一、学习路线"><a href="#一、学习路线" class="headerlink" title="一、学习路线"></a>一、学习路线</h2><h3 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h3><ul><li><p>二月份（选择）</p><p>准备选择题。该怎么准备。首先将培训视频中的内容全部过一遍。一个月的时间足够了。在听视频的同时将一些重点的内容记下来。哪些是重点内容，群文件里面有思维导图，里面的知识点就是重点.听视频重点听这些内容。如果二月底才开始准备，那么看完所有视频要花费的时间太多了，就不要全看了。选择重点部分看。5G网络架构与组网部署，协议与信令，5G常见参数和物理层过程（A组视频有这部分，b组可以去B站找去年的视频看这部分）这四个视频可以重点看一下。如果有同学进度比较快，那么视频看完之后就可以去做知识点总结。按照思维导图知识点的顺序，把涉及到的知识点详细整理下来。这个工作我也会做，预计三月中旬做完之后会发到QQ群里面。</p></li><li><p>三月份（选择+仿真）</p><p>如果你没有时间做知识点总结，那么直接看我总结的知识点。知识点弄熟以后，就可以刷题了。我建议先去做这两年的真题，真题已经发到群里面了，解析和参考答案会在三月初发布。通过做这些真题去感受下比赛的难度，考察的角度，重点。另外网盘里面有很多题库，有时间就多刷一下，拓展下视野。我也会把一些我觉得可能会考的题目发到群里。另外三月份重点去准备仿真，考哪些内容群文件仿真文件夹里面有。该怎么去准备呢？常规题目基站开通调测车联网B站，网盘上有很多资料。另外仔细看官方第二次直播提到的仿真内容：物理层过程，信息通信技术以及移动性管理。这几部分知识如果有时间，我也会去做总结，发到群里面。赛前一周官方会开通仿真平台，一定要把上面的题目一定弄明白，那是基础内容，考试的时候只会更难。</p></li><li><p>赛前（三月底四月初）</p><p>考前一定要再过一遍总结的知识点，以及这两年的真题。</p><p>大唐杯比赛并没有大家想的那么难，按部就班的照我说的去做，保底省二。</p></li></ul><h2 id="二、一些问题的说明"><a href="#二、一些问题的说明" class="headerlink" title="二、一些问题的说明"></a>二、一些问题的说明</h2><ol><li>看视频看不懂怎么办</li></ol><p>第一次看，听不懂很正常，不懂的一定要多听几遍。另外网盘里面有知识点资料，可以去里面找知识点，辅助理解视频内容。还有很多参考书籍也可以看看，重点看《5G系统技术原理与实现》。后面我也会在这本书中标记重点。</p><ol start="2"><li>什么时候比赛</li></ol><p>还没定，预计三月末四月初，等报名结束官方就会通知。</p><ol start="3"><li>培训视频在哪看</li></ol><p>学唐里面看。指导老师会给你开通账号密码。学唐不是官网。</p><p><a href="https://dtmobile.yunxuetang.cn/">学唐链接</a></p><p><a href="https://dtcup.dtxiaotangren.com/">官网链接</a></p><p>另外如果现在还没有学唐的账号，可以去B站看去年的省赛培训视频。内容基本一样。</p><p><a href="https://www.bilibili.com/video/BV1W3411K7FZ/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=5940e85c0b18a907a0fdea51914b4f65">培训视频</a></p><ol start="4"><li>在哪里练习仿真</li></ol><p>仿真平台现在还没开放，考前一周会开放。</p><ol start="5"><li>今年新增的两个考点信息通信技术和工程概论该怎么去准备</li></ol><p>这两部分资料我会去整理发到群里面，另外工程概论涉及到的参考书目，等开学（2.11）我买了之后扫描成电子版发到群里面。</p><p>另外第二次官方直播有对信息通信技术的讲解，可以去看看。信息通信技术很有可能出现在仿真里面，毕竟它的占比20%。工程概论要根据思维导图在参考书目中找到对应的知识点。</p><ol start="6"><li>关于资料的说明</li></ol><p>网盘资料链接在群公告里面，里面的内容是花钱买的或者网上搜到的，做了下整理汇总。题库里面的题目答案是否正确我也不知道，因为我还没有做。里面的知识点总结我觉得很好，里面还有很多有用的东西，希望大家一定要好好利用。资料多没用什么用，不看和没有一样。</p><ol start="7"><li>可以只刷题库吗</li></ol><p>题库太多根本刷不完，另一方面考试只会有部分原题，大部分还是要靠你平时的学习积累，培训视频一定要过一遍，对知识有个大致的理解，刷题的时候效率才会高。另外今年新增了信息通信技术和工程概论知识点，这两部分没有题库。</p><h2 id="三、写在后面"><a href="#三、写在后面" class="headerlink" title="三、写在后面"></a>三、写在后面</h2><p>  创建QQ群的目的，一方面给大家分享下学习资料，不用在去花冤枉钱，买到很多4G的资料。另一方面也是希望监督自己，今年取得一个不错的名次。有句话我很喜欢，与君共勉。</p><p>  我辈既务斯业，便当专心用功。<br>我要说的就这些，后面想起别的来会继续补充。<br>希望大家今年都能取得很好的成绩！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 大唐杯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
